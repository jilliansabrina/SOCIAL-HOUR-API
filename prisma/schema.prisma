// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  username     String    @unique
  password     String
  height       Decimal?
  weight       Decimal?
  bodyFat      Decimal?
  posts        Post[]
  postLikes    Like[]
  postComments Comment[]
  following    Follow[]  @relation("user-follower")
  followers    Follow[]  @relation("user-following")
}

// Unique constraint to prevent duplicate follow relationships
model Follow {
  id          Int  @id @default(autoincrement())
  follower    User @relation("user-follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("user-following", fields: [followingId], references: [id])
  followingId Int

  @@unique([followerId, followingId])
}

model Post {
  id        Int       @id @default(autoincrement())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  content   String?
  timestamp DateTime
  location  String?
  images    Image[]
  workouts  Workout[]
  comments  Comment[]
  likes     Like[]
}

model Workout {
  id        Int         @id @default(autoincrement())
  type      WorkoutType
  subtype   String?
  post      Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  exercises Exercise[]
}

model Image {
  id         Int     @id @default(autoincrement())
  objectPath String?
  post       Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
}

enum WorkoutType {
  STRENGTH
  CARDIO
  FLEXIBILITY
  CLASSES
  SPORTS
  OTHER
}

model Exercise {
  id        Int      @id @default(autoincrement())
  name      String
  sets      Int?
  reps      Int?
  distance  Decimal?
  pace      Decimal?
  weight    Decimal?
  duration  Decimal?
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  timestamp DateTime
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Like {
  id        Int      @id @default(autoincrement())
  timestamp DateTime
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}
